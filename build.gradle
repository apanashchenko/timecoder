buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
        classpath "io.franzbecker:gradle-lombok:1.14"
        classpath "gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:0.9.13"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.21"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "io.franzbecker.gradle-lombok"
apply plugin: "com.google.cloud.tools.jib"
apply plugin: "net.ltgt.apt"
apply plugin: "jacoco"

bootJar {
    baseName = 'timecoder-api-service'
}

version =  '1.4.0'

jib.to.image = "spirogov/timecoder:latest"

repositories {
    jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile 'org.springframework.boot:spring-boot-starter-webflux'
    compile 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    compile 'org.springframework.boot:spring-boot-starter-aop'

    compile 'mysql:mysql-connector-java'
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'
    compile "org.mapstruct:mapstruct-jdk8:1.3.0.Final"

    annotationProcessor 'org.mapstruct:mapstruct-processor:1.3.0.Final'
    
    testCompile 'org.springframework.boot:spring-boot-starter-test'
    testCompile group: 'com.h2database', name: 'h2', version: '1.4.199'
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.2.0')
    testCompile('org.junit.jupiter:junit-jupiter-params:5.2.0')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.2.0')
}

test {

//    use for jUnit5 tests
//    useJUnitPlatform()

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        showStandardStreams = true
        exceptionFormat = 'full'
    }

    test.outputs.upToDateWhen { false }
}

jacocoTestReport {
    group = "Reporting"
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/reports/coverage"
    }
}